{"version":3,"file":"content.min.js","sources":["../src/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/content\r\n * @class      core_courseformat/local/content\r\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Component from 'core_courseformat/local/content';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport Log from \"core/log\";\r\n\r\nexport default class TopcollComponent extends Component {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     *\r\n     * @param {Object} descriptor the component descriptor\r\n     */\r\n    create(descriptor) {\r\n        super.create(descriptor);\r\n        this.selectors.COURSE_TOGGLESECTIONLIST = `[data-for='course_togglesectionlist']`;\r\n        this.selectors.TOGGLESECTION = `.togglesection`;\r\n\r\n        Log.debug(this.selectors);\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @param {number} sectionReturn the content section return\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors, sectionReturn) {\r\n        return new TopcollComponent({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n            sectionReturn,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        var watchers = super.getWatchers();\r\n\r\n        Log.debug(\"getWatchers() - \" + watchers);\r\n\r\n        return watchers;\r\n        // Section return is a global page variable but most formats define it just before start printing\r\n        // the course content. This is the reason why we define this page setting here.\r\n        this.reactive.sectionReturn = this.sectionReturn;\r\n\r\n        // Check if the course format is compatible with reactive components.\r\n        if (!this.reactive.supportComponents) {\r\n            return [];\r\n        }\r\n        return [\r\n            // State changes that require to reload some course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            // Update section number and title.\r\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\r\n            // Collapse and expand sections.\r\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\r\n            // Sections and cm sorting.\r\n            {watch: `transaction:start`, handler: this._startProcessing},\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n            // Reindex sections and cms.\r\n            {watch: `state:updated`, handler: this._indexContents},\r\n            // State changes thaty require to reload course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCourseSectionlist({element}) {\r\n        Log.debug(\"_refreshCourseSectionlist() - \" + element);\r\n        // If we have a section return means we only show a single section so no need to fix order.\r\n        if (this.reactive.sectionReturn != 0) {\r\n            return;\r\n        }\r\n        const sectionlist = element.sectionlist.slice(1) ?? [];\r\n        Log.debug(\"_refreshCourseSectionlist() sectionlist - \" + sectionlist);\r\n        const listparent = this.getElement(this.selectors.COURSE_TOGGLESECTIONLIST);\r\n        // For now section cannot be created at a frontend level.\r\n        const createSection = this._createSectionItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, sectionlist, this.selectors.TOPCOLLSECTION, this.dettachedSections, createSection);\r\n        }\r\n    }\r\n}\r\n"],"names":["TopcollComponent","Component","create","descriptor","selectors","COURSE_TOGGLESECTIONLIST","TOGGLESECTION","debug","this","target","sectionReturn","element","document","getElementById","reactive","getWatchers","watchers","super","_refreshCourseSectionlist","sectionlist","slice","listparent","getElement","createSection","_createSectionItem","bind","_fixOrder","TOPCOLLSECTION","dettachedSections"],"mappings":";;;;;;;;uKA4BqBA,yBAAyBC,iBAO1CC,OAAOC,kBACGD,OAAOC,iBACRC,UAAUC,sEACVD,UAAUE,4CAEXC,MAAMC,KAAKJ,uBAWPK,OAAQL,UAAWM,sBACpB,IAAIV,iBAAiB,CACxBW,QAASC,SAASC,eAAeJ,QACjCK,UAAU,0CACVV,UAAAA,UACAM,cAAAA,gBASRK,kBACQC,SAAWC,MAAMF,kCAEjBR,MAAM,mBAAqBS,UAExBA,SAkCXE,8DAA0BP,QAACA,8BACnBJ,MAAM,iCAAmCI,SAEV,GAA/BH,KAAKM,SAASJ,2BAGZS,0CAAcR,QAAQQ,YAAYC,MAAM,0DAAM,gBAChDb,MAAM,6CAA+CY,mBACnDE,WAAab,KAAKc,WAAWd,KAAKJ,UAAUC,0BAE5CkB,cAAgBf,KAAKgB,mBAAmBC,KAAKjB,MAC/Ca,iBACKK,UAAUL,WAAYF,YAAaX,KAAKJ,UAAUuB,eAAgBnB,KAAKoB,kBAAmBL"}